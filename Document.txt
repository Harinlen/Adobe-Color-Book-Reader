一开始以8BCB开头。代表8B Color Book。
接着是一个16-bit数：00 01，标志。
接下来是书的标识：0B XX。
然后是书的标题：以一个32-bit数开头。表示长度，本例中为00 00 00 2F，转换为十进制是27，表示27个UTF-16字符。向后读取27个16BIT（5E个8BIT）。正好得到"$$$/colorbook/TOYO94/title=TOYO 94 COLOR FINDER"
接着是颜色名前缀，和标题一样：本例中为00 00 00 21，合计0x42个8BIT，得到"$$$/colorbook/TOYO94/prefix=TOYO "
接着是颜色名后缀，00 00 00 1D，合计0x3A个8BIT，得到"$$$/colorbook/TOYO94/postfix="
接着是书的描述，简单地说就是版权，00 00 00 44，合计0x88，得到"$$$/colorbook/TOYO94/description=Copyright^C Toyo Ink Mfg. Co., LTD."
颜色数量，一个16-bit数，本例：04 1A，合计1050，完全正确。
Page Size：一个16-bit数，一页最大数量……还有这限制？！本例为00 05，确实和PS相符。
Page Selector Offset：就是从一页中挑出第几个颜色显示在总预览条中，怪不得会有那么奇怪的设定。0表示最上面的，1表示第二个以此类推。但文档并未指出这是几位数。假设是一个16-bit数，那么本例是00 02。
Color Space：颜色模型：看到了最不愿意看到的，16-bit数。00 07，表示用Lab。

接下来是颜色记录。一条挨着一条
首先是颜色名字，以32-bit数开头，00 00 00 04，合计0x08个8-BIT：“0001”如果长度是0，老子就忽略它。
颜色代码，六个连续的字母？然后PS居然对这些信息视而不见？
接下来是颜色组成：
对于Lab来说：
三个byte。本例：6D B8 6D
l = l_byte / 2.55 + 0.5; // 0% thru 100%
a = a_byte - 128; // -128 thru 127
b = b_byte - 128; // -128 thru 127

CMYK

c = (255 - c_byte) / 2.55 + 0.5; // 0% thru 100%
m = (255 - m_byte) / 2.55 + 0.5; // 0% thru 100%
y = (255 - y_byte) / 2.55 + 0.5; // 0% thru 100%
b = (255 - b_byte) / 2.55 + 0.5; // 0% thru 100%

RGB

r = r_byte; // 0 thru 255
g = g_byte; // 0 thru 255
b = b_byte; // 0 thru 255
		
然后计算就可以了~！万岁！！
